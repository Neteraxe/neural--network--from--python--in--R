source("E:\\R\\project\\neural\\neural.R")
local({fn<-choose.files(filters=Filters[c('R','txt','All'),],index=4)
file.show(fn,header=fn,title='')})
q()
1/(1+exp(-x))
x <- 10
plogis(x)
print(plogis(x),1/(1+exp(-x)))
print(plogis(x),1/(1+exp(-x)))
print(plogis(x),1/(1+exp(-x)))
print(plogis(x),1/(1+exp(-x)))
print(plogis(x),1/(1+exp(-x)))
print(plogis(x),1/(1+exp(-x)))
print(1/(1+exp(-x)))
print(1/(1+exp(-x)))
print(1/(1+exp(-x)))
print(1/(1+exp(-x)))
print(1/(1+exp(-x)))
plogis(x)
print(var(plogis(x)))
print(1/(1+exp(-x)))
print(double(plogis(x)))
var(plogis(x))
plogis(x)
print(1/(1+exp(-x)))
print(1/(1+exp(-x)))
print(1/(1+exp(-x)))
print(1/(1+exp(-x)))
print(1/(1+exp(-x)))
print(1/(1+exp(-x)))
print(1/(1+exp(-x)))
print(1/(1+exp(-x)))
1/(1+exp(-x))
1/(1+exp(-x))
1/(1+exp(-x))
1/(1+exp(-x))
1/(1+exp(-x))
1/(1+exp(-x))
1/(1+exp(-x))
1/(1+exp(-x))
1/(1+exp(-x))
1/(1+exp(-x))
1/(1+exp(-x))
1/(1+exp(-x))
1/(1+exp(-x))
1/(1+exp(-x))
1/(1+exp(-x))
1/(1+exp(-x))
1/(1+exp(-x))
1/(1+exp(-x))
1/(1+exp(-x))
x <- 10
plogis(x)
1/(1+exp(-x))
# plogis(x) === 1/(1+exp(-x))
x <- 10
plogis(x) == 1/(1+exp(-x))
plogis(x) == 1/(1+exp(-x))
plogis(x) == 1/(1+exp(-x))
plogis(x) == 1/(1+exp(-x))
plogis(x) == 1/(1+exp(-x))
# plogis(x) === 1/(1+exp(-x))
x <- 10000
plogis(x) == 1/(1+exp(-x))
)
# plogis(x) === 1/(1+exp(-x))
MyClass <- setRefClass(
"MyClass",
fields = list(
x = "ANY",
y = "numeric",
z = "character"
),
methods = list(
initialize = function(x = NULL, y = 1:10, z = letters)
{
"This method is called when you create an instance of the class."
x <<- x
y <<- y
z <<- z
print("You initialized MyClass!")
},
hello = function()
{
"This method returns the string 'hello'."
"hello"
},
doubleY = function()
{
2 * y
},
printInput = function(input)
{
if(missing(input)) stop("You must provide some input.")
print(input)
}
)
)
obj <- MyClass$new
obj$hello
obj$hello()
obj <- MyClass$new()
obj$hello()
obj$hello()
obj$hello()
obj$hello()[0]
obj$hello()
obj$doubleY()
obj$printInput()
obj$printInput(jj)
obj$printInput(22)
obj$printInput()
obj$printInput("233333333")
obj$printInput("233333333"# plogis(x) === 1/(1+exp(-x)))
MyClass <- setRefClass(
"MyClass",
fields = list(
weights = "numeric",
bias = "numeric",
),
methods = list(
initialize = function(weights, bias)
{
if(missing(weights)) stop("You must provide some weights.")
if(missing(bias)) stop("You must provide some bias.")
weights <<- weights
bias <<- bias
print("You initialized MyClass!")
},
feedforward = function(inputs)
{
total = weights %*% bias
plogis(total)
},
doubleY = function()
{
2 * y
},
printInput = function(input)
{
if(missing(input)) stop("You must provide some input.")
print(input)
}
)
)
# plogis(x) === 1/(1+exp(-x))
MyClass <- setRefClass(
"MyClass",
fields = list(
weights = "numeric",
bias = "numeric",
),
methods = list(
initialize = function(weights, bias)
{
if(missing(weights)) stop("You must provide some weights.")
if(missing(bias)) stop("You must provide some bias.")
weights <<- weights
bias <<- bias
print("You initialized MyClass!")
},
feedforward = function(inputs)
{
total = weights %*% bias
plogis(total)
},
doubleY = function()
{
2 * y
},
printInput = function(input)
{
if(missing(input)) stop("You must provide some input.")
print(input)
},
)
)
# plogis(x) === 1/(1+exp(-x))
MyClass <- setRefClass(
"MyClass",
fields = list(
weights = "numeric",
bias = "numeric"
),
methods = list(
initialize = function(weights, bias)
{
if(missing(weights)) stop("You must provide some weights.")
if(missing(bias)) stop("You must provide some bias.")
weights <<- weights
bias <<- bias
print("You initialized MyClass!")
},
feedforward = function(inputs)
{
total = weights %*% bias
plogis(total)
},
doubleY = function()
{
2 * y
},
printInput = function(input)
{
if(missing(input)) stop("You must provide some input.")
print(input)
},
)
)
# plogis(x) === 1/(1+exp(-x))
MyClass <- setRefClass(
"MyClass",
fields = list(
weights = "numeric",
bias = "numeric"
),
methods = list(
initialize = function(weights, bias)
{
if(missing(weights)) stop("You must provide some weights.")
if(missing(bias)) stop("You must provide some bias.")
weights <<- weights
bias <<- bias
print("You initialized MyClass!")
},
feedforward = function(inputs)
{
total = weights %*% bias
plogis(total)
},
doubleY = function()
{
2 * y
},
printInput = function(input)
{
if(missing(input)) stop("You must provide some input.")
print(input)
}
)
)
weights <- c(0,1)
bias = 4
obj = MyClass$new(weights, bias)
input <- c(2,3)
obj$feedforward(input)
# plogis(x) === 1/(1+exp(-x))
MyClass <- setRefClass(
"MyClass",
fields = list(
weights = "numeric",
bias = "numeric"
),
methods = list(
initialize = function(weights, bias)
{
if(missing(weights)) stop("You must provide some weights.")
if(missing(bias)) stop("You must provide some bias.")
weights <<- weights
bias <<- bias
print("You initialized MyClass!")
},
feedforward = function(inputs)
{
total = weights %*% inputs + bias
plogis(total)
},
doubleY = function()
{
2 * y
},
printInput = function(input)
{
if(missing(input)) stop("You must provide some input.")
print(input)
}
)
)wi
# plogis(x) === 1/(1+exp(-x))
MyClass <- setRefClass(
"MyClass",
fields = list(
weights = "numeric",
bias = "numeric"
),
methods = list(
initialize = function(weights, bias)
{
if(missing(weights)) stop("You must provide some weights.")
if(missing(bias)) stop("You must provide some bias.")
weights <<- weights
bias <<- bias
print("You initialized MyClass!")
},
feedforward = function(inputs)
{
total = weights %*% inputs + bias
plogis(total)
},
doubleY = function()
{
2 * y
},
printInput = function(input)
{
if(missing(input)) stop("You must provide some input.")
print(input)
}
)
)
# plogis(x) === 1/(1+exp(-x))
Neuron <- setRefClass(
"Neuron",
fields = list(
weights = "numeric",
bias = "numeric"
),
methods = list(
initialize = function(weights, bias)
{
if(missing(weights)) stop("You must provide some weights.")
if(missing(bias)) stop("You must provide some bias.")
weights <<- weights
bias <<- bias
print("You initialized MyClass!")
},
feedforward = function(inputs)
{
total = weights %*% inputs + bias
plogis(total)
},
doubleY = function()
{
2 * y
},
printInput = function(input)
{
if(missing(input)) stop("You must provide some input.")
print(input)
}
)
)
weights <- c(0,1)
bias <- 4
obj <- Neuron$new(weights, bias)
x <- c(2,3)
obj$feedward(x)
obj$feedforward(x)
plogis(7)
q()
q()
source("E:\\Tools\\R\\project\\neural\\neural.R")
q()
q()
epochs <- 100
for (epoch in 0:epochs)
print(epoch)
epochs <- 1:100
for (epoch in epochs)
print(epoch)
data <- c(1,2,3,4,5)
data[1]
data[2]
data[0]
data.size()
data.class()
data <- (1,2,3,4,5)
data <- c(1,2,3,4,5)
data.size
data.size()
length(data)
data
kinds <- 0:length(data)
kinds
20 % 10
20 %% 10
20 / 10
month.abb
x <- c(1,2,3,4)
y <- c(2,2,2,2)
((y-x)**2).mean()
((y-x)**2).mean
((y-x)**2)
mean((y-x)**2)
print(3)
??print
source("neural.R")
source("neural.R")
source("neural.R")
source("neural.R")
source("neural.R")
source("neural.R")
source("neural.R")
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
c <- (0,0,1)
c <- c(0,0,1)
length(c)
data <- list(
c(-2, -1),  # Alice
c(25, 6),   # Bob
c(17, 4),   # Charlie
c(-15, -6) # Diana
)
length(data)
data[1]
data[1][1]
data[1][0]
data[1][1]
data[[1]][1]
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
feedforward((20, 2)
feedforward((20, 2))
feedforward(c(20, 2))
feedforward(c(-7, -3))
feedforward(c(-7, -3))
feedforward(c(20, 2))
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
plogis(1)
deriv_sigmoid(1)
b1
b2
w1
w2
w3
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
plogis(2)
plogis(3)
deriv_sigmoid(3)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
feedforward(c(-7, -3))
feedforward(c(20, 2))
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
source('E:/Tools/R/project/neural/neural.R', echo=TRUE)
